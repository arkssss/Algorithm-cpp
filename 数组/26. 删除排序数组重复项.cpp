/**
题目描述 :
给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

输入 :
给定 nums = [0,0,1,1,1,2,2,3,3,4],

输出 :
函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。

你不需要考虑数组中超出新长度后面的元素.
*/

// --------------------------------解题思路

/**
    如果不限制原地算法, 可以直接了用STL库的 set实现, set可以自动的删除重复项
    利用双指针 :
    时间 O(n)
    空间 O(1)
    
    大致思路就是声明两个数组指针 i, j
    其中i遍历整个数组
    j 判断此时遍历的元素是否和 i 重复, 如果没重复, 则将j+1的元素覆盖为i, 且新数组的长度加一即可
*/






class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        
        // 双指针, 并不需要去遍历覆盖, 时间复杂度其实只为 O(n)
        int len = nums.size();
        if(!len) return len;
        
        int new_len = 1;    
        for(int i=0,j=0; i<len; i++){
            
            // 利用 j 模拟保存为新数组
            if(nums[i] != nums[j]){

                nums[++j] = nums[i];
                new_len ++;
                
            }
        
        }
        return new_len;
    }
};